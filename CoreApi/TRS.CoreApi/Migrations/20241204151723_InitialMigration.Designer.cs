// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TRS.CoreApi.Database;

#nullable disable

namespace TRS.CoreApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241204151723_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TRS.CoreApi.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountBalanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountBasketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasAnnotation("Error_Message_Email", "Account with Email '{0}' already exists");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasAnnotation("Error_Message_Username", "Account with Username '{0}' already exists");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.AccountBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.AccountBasket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountBaskets", (string)null);
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.AccountBasketTicket", b =>
                {
                    b.Property<Guid>("AccountBasketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastTimeEdited")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountBasketId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("AccountBasketTickets", (string)null);
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("ValidityStartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasAnnotation("Error_Message_Ticket", "Ticket with Name '{0}' already exists");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.AccountBalance", b =>
                {
                    b.HasOne("TRS.CoreApi.Entities.Account", "Account")
                        .WithOne("AccountBalance")
                        .HasForeignKey("TRS.CoreApi.Entities.AccountBalance", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.AccountBasket", b =>
                {
                    b.HasOne("TRS.CoreApi.Entities.Account", null)
                        .WithOne("AccountBasket")
                        .HasForeignKey("TRS.CoreApi.Entities.AccountBasket", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.AccountBasketTicket", b =>
                {
                    b.HasOne("TRS.CoreApi.Entities.AccountBasket", "AccountBasket")
                        .WithMany("AccountBasketTickets")
                        .HasForeignKey("AccountBasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRS.CoreApi.Entities.Ticket", "Ticket")
                        .WithMany("AccountBasketTickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountBasket");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.Account", b =>
                {
                    b.Navigation("AccountBalance");

                    b.Navigation("AccountBasket");
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.AccountBasket", b =>
                {
                    b.Navigation("AccountBasketTickets");
                });

            modelBuilder.Entity("TRS.CoreApi.Entities.Ticket", b =>
                {
                    b.Navigation("AccountBasketTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
